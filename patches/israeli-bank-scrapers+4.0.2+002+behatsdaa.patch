diff --git a/node_modules/israeli-bank-scrapers/lib/definitions.js b/node_modules/israeli-bank-scrapers/lib/definitions.js
index 37bd1de..c993ce3 100644
--- a/node_modules/israeli-bank-scrapers/lib/definitions.js
+++ b/node_modules/israeli-bank-scrapers/lib/definitions.js
@@ -28,6 +28,7 @@ exports.CompanyTypes = CompanyTypes;
   CompanyTypes["yahav"] = "yahav";
   CompanyTypes["beyahadBishvilha"] = "beyahadBishvilha";
   CompanyTypes["oneZero"] = "oneZero";
+  CompanyTypes["behatsdaa"] = "behatsdaa";
 })(CompanyTypes || (exports.CompanyTypes = CompanyTypes = {}));
 
 const SCRAPERS = {
@@ -100,7 +101,11 @@ const SCRAPERS = {
   [CompanyTypes.oneZero]: {
     name: 'One Zero',
     loginFields: ['email', PASSWORD_FIELD, 'otpCodeRetriever', 'phoneNumber', 'otpLongTermToken']
-  }
+  },
+  [CompanyTypes.behatsdaa]: {
+    name: 'Behatsdaa',
+    loginFields: ['id', PASSWORD_FIELD],
+  },
 };
 exports.SCRAPERS = SCRAPERS;
 let ScraperProgressTypes;
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.js b/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.js
new file mode 100644
index 0000000..c4b5474
--- /dev/null
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/behatsdaa.js
@@ -0,0 +1,138 @@
+"use strict";
+
+require("core-js/modules/es.array.iterator");
+
+require("core-js/modules/es.promise");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = void 0;
+
+var _moment = _interopRequireDefault(require("moment"));
+
+var _debug = require("../helpers/debug");
+
+var _fetch = require("../helpers/fetch");
+
+var _transactions = require("../transactions");
+
+var _baseScraperWithBrowser = require("./base-scraper-with-browser");
+
+var _elementsInteractions = require("../helpers/elements-interactions");
+
+function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+const BASE_URL = 'https://www.behatsdaa.org.il';
+const LOGIN_URL = `${BASE_URL}/login`;
+const PURCHASE_HISTORY_URL = 'https://back.behatsdaa.org.il/api/purchases/purchaseHistory';
+const debug = (0, _debug.getDebug)('behatsdaa');
+
+function variantToTransaction(variant) {
+  return {
+    type: _transactions.TransactionTypes.Normal,
+    identifier: variant.tTransactionID,
+    date: (0, _moment.default)(variant.orderDate).format('YYYY-MM-DD'),
+    processedDate: (0, _moment.default)(variant.orderDate).format('YYYY-MM-DD'),
+    originalAmount: variant.customerPrice,
+    originalCurrency: 'ILS',
+    chargedAmount: variant.customerPrice,
+    chargedCurrency: 'ILS',
+    description: variant.name,
+    status: _transactions.TransactionStatuses.Completed,
+    memo: variant.variantName
+  };
+}
+
+class BehatsdaaScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
+  getLoginOptions(credentials) {
+    return {
+      loginUrl: LOGIN_URL,
+      fields: [{
+        selector: '#loginId',
+        value: credentials.id
+      }, {
+        selector: '#loginPassword',
+        value: credentials.password
+      }],
+      checkReadiness: async () => {
+        await Promise.all([(0, _elementsInteractions.waitUntilElementFound)(this.page, '#loginPassword'), (0, _elementsInteractions.waitUntilElementFound)(this.page, '#loginId')]);
+      },
+      possibleResults: {
+        [_baseScraperWithBrowser.LoginResults.Success]: [`${BASE_URL}/`],
+        [_baseScraperWithBrowser.LoginResults.InvalidPassword]: ['.custom-input-error-label']
+      },
+      submitButtonSelector: async () => {
+        await this.page.waitForTimeout(1000);
+        debug('Trying to find submit button');
+        const [button] = await this.page.$x("//button[contains(., 'התחברות')]");
+
+        if (button) {
+          debug('Submit button found');
+          await button.click();
+        } else {
+          debug('Submit button not found');
+        }
+      }
+    };
+  }
+
+  async fetchData() {
+    var _res$data;
+
+    const token = await this.page.evaluate(() => window.localStorage.getItem('userToken'));
+
+    if (!token) {
+      debug('Token not found in local storage');
+      return {
+        success: false,
+        errorMessage: 'TokenNotFound'
+      };
+    }
+
+    const body = {
+      FromDate: (0, _moment.default)(this.options.startDate).format('YYYY-MM-DDTHH:mm:ss'),
+      ToDate: (0, _moment.default)().format('YYYY-MM-DDTHH:mm:ss'),
+      BenefitStatusId: null
+    };
+    debug('Fetching data');
+    const res = await (0, _fetch.fetchPostWithinPage)(this.page, PURCHASE_HISTORY_URL, body, {
+      authorization: `Bearer ${token}`,
+      'Content-Type': 'application/json',
+      organizationid: '20'
+    });
+    debug('Data fetched');
+
+    if ((res === null || res === void 0 ? void 0 : res.errorDescription) || (res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.errorDescription)) {
+      var _res$data2;
+
+      debug('Error fetching data', res.errorDescription || ((_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.errorDescription));
+      return {
+        success: false,
+        errorMessage: res.errorDescription
+      };
+    }
+
+    if (!(res === null || res === void 0 ? void 0 : res.data)) {
+      debug('No data found');
+      return {
+        success: false,
+        errorMessage: 'NoData'
+      };
+    }
+
+    debug('Data fetched successfully');
+    return {
+      success: true,
+      accounts: [{
+        accountNumber: res.data.memberId,
+        txns: res.data.variants.map(variantToTransaction)
+      }]
+    };
+  }
+
+}
+
+var _default = BehatsdaaScraper;
+exports.default = _default;
+//# sourceMappingURL=data:application/json;charset=utf-8;base64,
\ No newline at end of file
diff --git a/node_modules/israeli-bank-scrapers/lib/scrapers/factory.js b/node_modules/israeli-bank-scrapers/lib/scrapers/factory.js
index 923c20d..2bb8a91 100644
--- a/node_modules/israeli-bank-scrapers/lib/scrapers/factory.js
+++ b/node_modules/israeli-bank-scrapers/lib/scrapers/factory.js
@@ -37,6 +37,8 @@ var _beyahadBishvilha = _interopRequireDefault(require("./beyahad-bishvilha"));
 
 var _oneZero = _interopRequireDefault(require("./one-zero"));
 
+var _behatsdaa = _interopRequireDefault(require("./behatsdaa"));
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 
 function createScraper(options) {
@@ -95,7 +97,8 @@ function createScraper(options) {
 
     case _definitions.CompanyTypes.oneZero:
       return new _oneZero.default(options);
-
+    case _definitions.CompanyTypes.behatsdaa:
+      return new _behatsdaa.default(options);
     default:
       throw new Error(`unknown company id ${options.companyId}`);
   }
